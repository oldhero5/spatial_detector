[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spatial-detector"
version = "0.1.0"
authors = [
  { name = "Marty H", email = "oldhero5@proton.me" },
]
description = "3D object detection and spatial mapping using webcam"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "torch>=1.13.0",
    "torchvision>=0.14.0",
    "ultralytics>=8.0.0",
    "opencv-python>=4.5.0",
    "numpy>=1.19.0",
    "timm==0.6.13",
    "matplotlib>=3.5.0",
    "tqdm>=4.64.0",
]

[project.optional-dependencies]
web = [
    "flask>=2.0.0",
    "flask-cors>=3.0.10",
    "flask-socketio>=5.1.1",
    "qrcode>=7.3.1",
]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "ruff>=0.1.9",
    "pre-commit>=3.5.0",
    "detect-secrets>=1.4.0",
    "bandit>=1.7.5",
]

[project.urls]
"Homepage" = "https://github.com/oldhero5/spatial-detector"
"Bug Tracker" = "https://github.com/oldhero5/spatial-detector/issues"

[project.scripts]
spatial-detector = "spatial_detector.cli.webcam_app:main"
spatial-detector-web = "spatial_detector.web.server:main"

[tool.black]
line-length = 88
target-version = ['py37']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.ruff]
# Same as Black.
line-length = 88

# Assume Python 3.7
target-version = "py37"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "3d_detection_env",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "N806",  # Variable in function should be lowercase
    "B904",  # Within an except clause, raise exceptions with raise ... from err
    "F401",  # imported but unused (for __init__.py exports)
    "RUF013", # PEP 484 prohibits implicit Optional
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
